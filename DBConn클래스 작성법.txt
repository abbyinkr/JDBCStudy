/*==========================================
   DBConn.java
   - 예외처리 방법을 try ~ catch → throws
===========================================*/
package com.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBConn
{
	// 변수 선언
	private static Connection dbConn;
	
	// 메소드 정의
	public static Connection getConnection() throws ClassNotFoundException, SQLException
	{
		if (dbConn == null)
		{
			String url = "jdbc:oracle:thin:@211.238.142.166:1521:xe";
			String user = "scott";
			String pwd = "tiger";

			Class.forName("oracle.jdbc.driver.OracleDriver");
			// OracleDriver 객체 생성 
			
			dbConn = DriverManager.getConnection(url,user,pwd);
			// 오라클 서버 실제 연결 
			
		}
		
		return dbConn;
		
	}
	
	public static Connection getConnection(String url, String user, String pwd) throws ClassNotFoundException, SQLException
	{
		if (dbConn == null)
		{	
			Class.forName("oracle.jdbc.driver.OracleDriver");
			// 드라이버 객체 생성
			
			dbConn = DriverManager.getConnection(url, user, pwd);
			// 오라클 서버 실제 연결
		}
		
		return dbConn;
		
	}
	
	public static void close() throws SQLException
	{
		// 연결되있으면
		if (dbConn != null)
		{
			// 연결객체가 열려있으면 (서버에 연결되어있으면)
			if (!dbConn.isClosed())
				// 닫고
				dbConn.close();
		}
		
		dbConn = null;
		// 연결 객체 초기화
	}
	
	
	
}


---------------------------------------------------
try~ catch


/*============================
  DBConn.java
  - try ~ catch 로 예외처리
============================*/

package com.util;

import java.sql.Connection;
import java.sql.DriverManager;


public class DBConn
{
	// 변수 선언
	private static Connection dbConn;
	// -- 자동으로 null 로 초기화

	// 메소드 정의 → 연결
	public static Connection getConnection()
	{

		if (dbConn == null)
		{
			try
			{
				String url = "jdbc:oracle:thin:@211.238.142.166:1521:xe";


				String user = "scott"; // -- 오라클 사용자 계정 이름
				String pwd = "tiger"; // -- 오라클 사용자 계정 암호

				Class.forName("oracle.jdbc.driver.OracleDriver");
				// -- OracleDriver 클래스에 대한 객체 생성

				dbConn = DriverManager.getConnection(url, user, pwd);
				// -- 오라클 서버 실제 연결


			} catch (Exception e) // ClassNotFoundException, SQLException
			{
				System.out.println(e.toString());
			}
		}

		return dbConn;
		// -- 구성된 연결 객체 반환
	}

	// getConnection() 메소드의 오버로딩 → 연결
	public static Connection getConnection(String url, String user, String pwd)
	{

		if (dbConn == null)
		{
			try
			{
				Class.forName("oracle.jdbc.driver.OracleDriver");
				// -- OracleDriver 클래스에 대한 객체 생성
				dbConn = DriverManager.getConnection(url, user, pwd);
				// -- 오라클 서버 실제 연결

			} catch (Exception e) // ClassNotFoundException, SQLException
			{
				System.out.println(e.toString());
				// -- 오라클 서버 시연결 실패 시 오류 메세지 출력 부분
			}
		}
		return dbConn;
		// -- 구성된 연결 객체 반환
	}

	// 메소드 정의 → 연결 종료
	public static void close()
	{

		if (dbConn != null)
		{
			try
			{

				if (!dbConn.isClosed())
					dbConn.close();
				// -- 연결 객체의 close() 메소드를 통해 연결 종료

			} catch (Exception e)
			{
				System.out.println(e.toString());
				
			}
		}

		dbConn = null;
		// -- 연결 객체 초기화
	}

}


